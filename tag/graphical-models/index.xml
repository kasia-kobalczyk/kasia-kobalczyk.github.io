<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Graphical Models | Katarzyna (Kasia) Kobalczyk</title><link>https://&lt;USERNAME>.github.io/kasia-kobalczyk/tag/graphical-models/</link><atom:link href="https://<USERNAME>.github.io/kasia-kobalczyk/tag/graphical-models/index.xml" rel="self" type="application/rss+xml"/><description>Graphical Models</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Tue, 15 Aug 2023 00:00:00 +0000</lastBuildDate><image><url>https://&lt;USERNAME>.github.io/kasia-kobalczyk/media/icon_hu657cd6d5c75f57c23416a235dc5083f6_34177_512x512_fill_lanczos_center_3.png</url><title>Graphical Models</title><link>https://&lt;USERNAME>.github.io/kasia-kobalczyk/tag/graphical-models/</link></image><item><title>cegpy: Modelling with chain event graphs in Python</title><link>https://&lt;USERNAME>.github.io/kasia-kobalczyk/publications/articles/cegpy/</link><pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate><guid>https://&lt;USERNAME>.github.io/kasia-kobalczyk/publications/articles/cegpy/</guid><description>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="imgage" srcset="
/kasia-kobalczyk/publications/articles/cegpy/cegpy_hua68a355d8bc9858a5831efd1c8071401_299686_4397be2c0af16aaf5f3ac2b5a615a613.webp 400w,
/kasia-kobalczyk/publications/articles/cegpy/cegpy_hua68a355d8bc9858a5831efd1c8071401_299686_6a0b259df9d5654459c96c9573936561.webp 760w,
/kasia-kobalczyk/publications/articles/cegpy/cegpy_hua68a355d8bc9858a5831efd1c8071401_299686_1200x1200_fit_q100_h2_lanczos_3.webp 1200w"
src="https://<USERNAME>.github.io/kasia-kobalczyk/kasia-kobalczyk/publications/articles/cegpy/cegpy_hua68a355d8bc9858a5831efd1c8071401_299686_4397be2c0af16aaf5f3ac2b5a615a613.webp"
width="760"
height="383"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>Chain event graphs (CEGs) are a recent family of probabilistic graphical models that generalise the popular Bayesian networks (BNs) family. Crucially, unlike BNs, a CEG is able to embed, within its graph and its statistical model, asymmetries exhibited by a process. These asymmetries might be in the conditional independence relationships or in the structure of the graph and its underlying event space. Structural asymmetries are common in many domains, and can occur naturally (e.g. a defendant vs prosecutor’s version of events) or by design (e.g. a public health intervention). Whilst two CEG packages exist in R for modelling processes with asymmetric conditional independencies, there currently exists no software that allows a user to leverage the theoretical developments of the CEG model family in modelling processes with structural asymmetries. In this paper, we present cegpy—the first Python implementation of CEGs and the first across all languages to support structurally asymmetric processes. cegpy contains an implementation of Bayesian learning and probability propagation algorithms for CEGs. We illustrate the functionality of cegpy using a structurally asymmetric dataset.&lt;/p></description></item></channel></rss>